use std::io::{Read, Result as IoResult, Write};
use std::ops::Index;
use std::process::{Command, Stdio};

use anyhow::Result as AnyResult;

pub fn generate_svg(scr: &str) -> IoResult<String> {
	let mut proc = Command::new("dot")
		.args(&["-Tsvg"])
		.stdin(Stdio::piped())
		.stdout(Stdio::piped())
		.spawn()?;

	if let Some(mut stdin) = proc.stdin.take() {
		stdin.write_all(scr.as_bytes())?;
	}

	let mut buff = String::default();
	if let Some(mut stdout) = proc.stdout.take() {
		stdout.read_to_string(&mut buff)?;
	}

	Ok(buff)
}

pub fn extract_svg_element(scr: &str) -> AnyResult<String> {
	let reg = regex::Regex::new(r"(?s)<svg.*?</svg>")?;

	return if let Some(cap) = reg.captures(scr) {
		if cap.len() == 1 {
			Ok(cap.index(0).to_string())
		} else {
			Err(anyhow::Error::msg(format!(
				"Expected len=1 but {}",
				cap.len()
			)))
		}
	} else {
		Err(anyhow::Error::msg("No captured."))
	};
}

// <!DOCTYPE html>
// <html lang="ja">
// <head>
// <meta charset="UTF-8">
// <title>SVG Example</title>
// </head>
// <body>
// <svg width="100" height="100">
// <circle cx="50" cy="50" r="40" stroke="green" stroke-width="4" fill="yellow" />
// </svg>
// </body>
// </html>

pub fn create_document(title: &str, svg: &str, path: &str) {}

#[cfg(test)]
pub mod tests {
	use super::*;
	use once_cell::sync::Lazy;

	const DOT: &str = r#"digraph arithmetic_tree{
   node [fontname = "Cascadia Code Regular"];

	1 [label="+",shape = "hexagon"]
	2 [label="1",shape="box"]
	1 -> 2
	3 [label="*",shape = "hexagon"]
	1 -> 3
	4 [label="2",shape="box"]
	3 -> 4
	5 [label="{...}",shape = "house"]
	6 [label="+",shape = "hexagon"]
	5 -> 6
	7 [label="3",shape="box"]
	6 -> 7
	8 [label="4",shape="box"]
	6 -> 8
	3 -> 5
}
"#;
	const EXPECTED_FULL_SVG: Lazy<Vec<String>> =
		Lazy::<Vec<String>>::new(|| vec![
			r##"<?xml version="1.0" encoding="UTF-8" standalone="no"?>"##.to_string(),
			r##"<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN""##.to_string(),
			r##""http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">"##.to_string(),
			r##"<!-- Generated by graphviz version 10.0.1 (0)"##.to_string(),
			r##"-->"##.to_string(),
			r##"<!-- Title: arithmetic_tree Pages: 1 -->"##.to_string(),
			r##"<svg width="218pt" height="332pt""##.to_string(),
			r##"viewBox="0.00 0.00 218.00 332.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">"##.to_string(),
			r##"<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 328)">"##.to_string(),
			r##"<title>arithmetic_tree</title>"##.to_string(),
			r##"<polygon fill="white" stroke="none" points="-4,4 -4,-328 214,-328 214,4 -4,4"/>"##.to_string(),
			r##"<!-- 1 -->"##.to_string(),
			r##"<g id="node1" class="node">"##.to_string(),
			r##"<title>1</title>"##.to_string(),
			r##"<polygon fill="none" stroke="black" points="90,-306 76.5,-324 49.5,-324 36,-306 49.5,-288 76.5,-288 90,-306"/>"##.to_string(),
			r##"<text text-anchor="middle" x="63" y="-301.32" font-family="Cascadia Code Regular" font-size="14.00">+</text>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 2 -->"##.to_string(),
			r##"<g id="node2" class="node">"##.to_string(),
			r##"<title>2</title>"##.to_string(),
			r##"<polygon fill="none" stroke="black" points="54,-252 0,-252 0,-216 54,-216 54,-252"/>"##.to_string(),
			r##"<text text-anchor="middle" x="27" y="-229.32" font-family="Cascadia Code Regular" font-size="14.00">1</text>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 1&#45;&gt;2 -->"##.to_string(),
			r##"<g id="edge1" class="edge">"##.to_string(),
			r##"<title>1&#45;&gt;2</title>"##.to_string(),
			r##"<path fill="none" stroke="black" d="M54.1,-287.7C50.13,-279.98 45.37,-270.71 40.94,-262.11"/>"##.to_string(),
			r##"<polygon fill="black" stroke="black" points="44.17,-260.74 36.49,-253.45 37.95,-263.94 44.17,-260.74"/>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 3 -->"##.to_string(),
			r##"<g id="node3" class="node">"##.to_string(),
			r##"<title>3</title>"##.to_string(),
			r##"<polygon fill="none" stroke="black" points="126,-234 112.5,-252 85.5,-252 72,-234 85.5,-216 112.5,-216 126,-234"/>"##.to_string(),
			r##"<text text-anchor="middle" x="99" y="-229.32" font-family="Cascadia Code Regular" font-size="14.00">*</text>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 1&#45;&gt;3 -->"##.to_string(),
			r##"<g id="edge2" class="edge">"##.to_string(),
			r##"<title>1&#45;&gt;3</title>"##.to_string(),
			r##"<path fill="none" stroke="black" d="M71.9,-287.7C75.87,-279.98 80.63,-270.71 85.06,-262.11"/>"##.to_string(),
			r##"<polygon fill="black" stroke="black" points="88.05,-263.94 89.51,-253.45 81.83,-260.74 88.05,-263.94"/>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 4 -->"##.to_string(),
			r##"<g id="node4" class="node">"##.to_string(),
			r##"<title>4</title>"##.to_string(),
			r##"<polygon fill="none" stroke="black" points="79,-180 25,-180 25,-144 79,-144 79,-180"/>"##.to_string(),
			r##"<text text-anchor="middle" x="52" y="-157.32" font-family="Cascadia Code Regular" font-size="14.00">2</text>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 3&#45;&gt;4 -->"##.to_string(),
			r##"<g id="edge3" class="edge">"##.to_string(),
			r##"<title>3&#45;&gt;4</title>"##.to_string(),
			r##"<path fill="none" stroke="black" d="M87.38,-215.7C82.09,-207.81 75.7,-198.3 69.82,-189.55"/>"##.to_string(),
			r##"<polygon fill="black" stroke="black" points="72.81,-187.71 64.33,-181.36 67,-191.61 72.81,-187.71"/>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 5 -->"##.to_string(),
			r##"<g id="node5" class="node">"##.to_string(),
			r##"<title>5</title>"##.to_string(),
			r##"<polygon fill="none" stroke="black" points="196.64,-167.56 147,-180 97.36,-167.56 97.41,-147.44 196.59,-147.44 196.64,-167.56"/>"##.to_string(),
			r##"<text text-anchor="middle" x="147" y="-157.32" font-family="Cascadia Code Regular" font-size="14.00">{...}</text>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 3&#45;&gt;5 -->"##.to_string(),
			r##"<g id="edge7" class="edge">"##.to_string(),
			r##"<title>3&#45;&gt;5</title>"##.to_string(),
			r##"<path fill="none" stroke="black" d="M110.87,-215.7C116.8,-207.04 124.08,-196.43 130.54,-187"/>"##.to_string(),
			r##"<polygon fill="black" stroke="black" points="133.27,-189.21 136.04,-178.99 127.5,-185.25 133.27,-189.21"/>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 6 -->"##.to_string(),
			r##"<g id="node6" class="node">"##.to_string(),
			r##"<title>6</title>"##.to_string(),
			r##"<polygon fill="none" stroke="black" points="174,-90 160.5,-108 133.5,-108 120,-90 133.5,-72 160.5,-72 174,-90"/>"##.to_string(),
			r##"<text text-anchor="middle" x="147" y="-85.33" font-family="Cascadia Code Regular" font-size="14.00">+</text>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 5&#45;&gt;6 -->"##.to_string(),
			r##"<g id="edge4" class="edge">"##.to_string(),
			r##"<title>5&#45;&gt;6</title>"##.to_string(),
			r##"<path fill="none" stroke="black" d="M147,-147.17C147,-139.33 147,-129.21 147,-119.73"/>"##.to_string(),
			r##"<polygon fill="black" stroke="black" points="150.5,-119.79 147,-109.79 143.5,-119.79 150.5,-119.79"/>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 7 -->"##.to_string(),
			r##"<g id="node7" class="node">"##.to_string(),
			r##"<title>7</title>"##.to_string(),
			r##"<polygon fill="none" stroke="black" points="138,-36 84,-36 84,0 138,0 138,-36"/>"##.to_string(),
			r##"<text text-anchor="middle" x="111" y="-13.32" font-family="Cascadia Code Regular" font-size="14.00">3</text>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 6&#45;&gt;7 -->"##.to_string(),
			r##"<g id="edge5" class="edge">"##.to_string(),
			r##"<title>6&#45;&gt;7</title>"##.to_string(),
			r##"<path fill="none" stroke="black" d="M138.1,-71.7C134.13,-63.98 129.37,-54.71 124.94,-46.11"/>"##.to_string(),
			r##"<polygon fill="black" stroke="black" points="128.17,-44.74 120.49,-37.45 121.95,-47.94 128.17,-44.74"/>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 8 -->"##.to_string(),
			r##"<g id="node8" class="node">"##.to_string(),
			r##"<title>8</title>"##.to_string(),
			r##"<polygon fill="none" stroke="black" points="210,-36 156,-36 156,0 210,0 210,-36"/>"##.to_string(),
			r##"<text text-anchor="middle" x="183" y="-13.32" font-family="Cascadia Code Regular" font-size="14.00">4</text>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"<!-- 6&#45;&gt;8 -->"##.to_string(),
			r##"<g id="edge6" class="edge">"##.to_string(),
			r##"<title>6&#45;&gt;8</title>"##.to_string(),
			r##"<path fill="none" stroke="black" d="M155.9,-71.7C159.87,-63.98 164.63,-54.71 169.06,-46.11"/>"##.to_string(),
			r##"<polygon fill="black" stroke="black" points="172.05,-47.94 173.51,-37.45 165.83,-44.74 172.05,-47.94"/>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"</g>"##.to_string(),
			r##"</svg>"##.to_string(),
		
		]);

	#[test]
	fn gen_svg() {
		let fixture = generate_svg(&DOT).unwrap();
		let actual:Vec<_>=fixture.split("\r\n").filter(|x|x.len()!=0).collect();
		
		assert_eq!(actual.len(),EXPECTED_FULL_SVG.len());

		
		
		
		//assert_eq!(&fixture, );
	}
}
